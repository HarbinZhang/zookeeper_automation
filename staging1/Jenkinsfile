#!groovy

// For more details: https://intranet.zuora.com/confluence/display/PE/Fjord+Docker+Build

STG_US_WEST_ECR = "122972921717.dkr.ecr.us-west-2.amazonaws.com"
STG_EU_CENTRAL_ECR = "122972921717.dkr.ecr.eu-central-1.amazonaws.com"
PROD_US_WEST_ECR = "049751716774.dkr.ecr.us-west-2.amazonaws.com"
PROD_EU_CENTRAL_ECR = "049751716774.dkr.ecr.eu-central-1.amazonaws.com"

SERVICE = "zuora/zookeeper"

pipeline {
    agent { label 'ec2-fleet' }

    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '1000'))
        skipStagesAfterUnstable()
    }    

    parameters {
        string(name: 'name', defaultValue: 'fjord-zookeeper', description: 'DO NOT CHANGE')
        booleanParam(name: 'deploy_prod', defaultValue: false, description: 'will also deploy image to prod. Only master branch can deploy to prod.')
        string(name: 'version', defaultValue: 'latest', description: 'What version to deploy')
        string(name: 'branch', defaultValue: 'master', description:'The branch to use')
    }

    stages {

        stage('Initialize') {
            steps {
                echo "----------------- Initializing -----------------"
                script {    

                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    BUILD_TAG="3.4.11-${COMMIT_HASH}"
                    PORTER_JMX_VERSION = "1.0.1"

                    // check params choice correctly.
                    if ( params.deploy_prod == true && params.branch != 'master' ) {
                        echo "Must use master to deploy to Prod"
                        logger("Using other branch other than master to deploy to Prod")
                        System.exit(0)
                    }

                    if ( params.deploy_prod == false ){
                        STAGE = 'STG'
                    } else {
                        STAGE = 'Prod'
                    }                    
                }

            }
        }

        stage('Docker Image Build & Push STG') {
            steps {
                sh "git checkout origin/${params.branch}"

                dir("./zookeeper"){
                    sh "./build.sh"

                    withAWS(role: 'jenkinsfarm-cross-account', roleAccount: '122972921717') {
                        sh "eval \$(aws ecr get-login --region us-west-2 --no-include-email)"
                        sh "eval \$(aws ecr get-login --region eu-central-1 --no-include-email)"
                    }
                    script {
                        [STG_US_WEST_ECR, STG_EU_CENTRAL_ECR].each {
                            sh "docker tag ${SERVICE}:latest ${it}/${SERVICE}:${BUILD_TAG}"
                            sh "docker tag ${SERVICE}:latest ${it}/${SERVICE}:latest"
                            sh "docker push ${it}/${SERVICE}:${BUILD_TAG}"
                            sh "docker push ${it}/${SERVICE}:latest"
                        }
                    }   
                }            
            }
        }

        stage('Docker Push Prod') {
            when {
                expression {
                    params.branch == 'master' && params.deploy_prod == true
                }
            }
            steps {
                echo "Deploy to Prod"
                withAWS(role: 'jenkinsfarm-cross-account', roleAccount: '122972921717') {
                    sh "eval \$(aws ecr get-login --region us-west-2 --no-include-email)"
                    sh "eval \$(aws ecr get-login --region eu-central-1 --no-include-email)"
                }
                sh "eval \$(aws ecr get-login --region us-west-2 --no-include-email)"
                sh "eval \$(aws ecr get-login --region eu-central-1 --no-include-email)"                
                script {
                    [PROD_EU_CENTRAL_ECR, PROD_US_WEST_ECR].each {
                        sh "docker tag ${SERVICE}:latest ${it}/${SERVICE}:${BUILD_TAG}"
                        sh "docker tag ${SERVICE}:latest ${it}/${SERVICE}:latest"
                        sh "docker push ${it}/${SERVICE}:${BUILD_TAG}"
                        sh "docker push ${it}/${SERVICE}:latest"
                    } 
                }
            }
        }

    }

    post {
        success {
            slackSend channel: '#fjord-build',
                    color: 'good',
                    message: "Deployed ${SERVICE}: ${BUILD_TAG} to ${STAGE} successfully!  :thumbsup:"
        }

        failure {
            slackSend channel: '#fjord-build',
                    color: 'danger',
                    message: "Deployment of ${SERVICE}: ${BUILD_TAG} to ${STAGE} failed. See the <${BUILD_URL}|job> for details"
        }
    } 

}
